const { ethers } = require("hardhat");

async function main() {
  // ‰ªéÈÉ®ÁΩ≤Êñá‰ª∂‰∏≠ËØªÂèñÂêàÁ∫¶Âú∞ÂùÄ
  const fs = require("fs");
  const path = require("path");
  
  const deploymentFile = path.join(__dirname, "../deployments/LipsNft-deployment.json");
  
  if (!fs.existsSync(deploymentFile)) {
    console.log("‚ùå Êâæ‰∏çÂà∞ÈÉ®ÁΩ≤Êñá‰ª∂ÔºåËØ∑ÂÖàËøêË°åÈÉ®ÁΩ≤ËÑöÊú¨");
    return;
  }
  
  const deploymentInfo = JSON.parse(fs.readFileSync(deploymentFile, "utf8"));
  const contractAddress = deploymentInfo.contractAddress;
  
  console.log("ËøûÊé•Âà∞Â∑≤ÈÉ®ÁΩ≤ÁöÑÂêàÁ∫¶:", contractAddress);
  
  // Ëé∑ÂèñÂêàÁ∫¶ÂÆû‰æã
  const LipsNft = await ethers.getContractFactory("LipsNft");
  const lipsNft = LipsNft.attach(contractAddress);
  
  // Ëé∑ÂèñÈÉ®ÁΩ≤ËÄÖË¥¶Êà∑
  const [deployer] = await ethers.getSigners();
  console.log("ÂΩìÂâçË¥¶Êà∑:", deployer.address);
  
  // Á§∫‰æãÊìç‰Ωú
  console.log("\n=== ÂêàÁ∫¶‰∫§‰∫íÁ§∫‰æã ===");
  
  // 1. ËÆæÁΩÆÂü∫Á°Ä URI
  console.log("1. ËÆæÁΩÆÂü∫Á°Ä URI...");
  const baseURI = "https://ipfs.io/ipfs/your-metadata-hash/";
  try {
    const tx1 = await lipsNft.setBaseURI(baseURI);
    await tx1.wait();
    console.log("‚úÖ Âü∫Á°Ä URI ËÆæÁΩÆÊàêÂäü");
  } catch (error) {
    console.log("‚ö†Ô∏è ËÆæÁΩÆÂü∫Á°Ä URI Â§±Ë¥•:", error.message);
  }
  
  // 2. Èì∏ÈÄ†Á¨¨‰∏Ä‰∏™ NFT
  console.log("\n2. Èì∏ÈÄ† NFT...");
  try {
    const tx2 = await lipsNft.safeMint(deployer.address);
    await tx2.wait();
    console.log("‚úÖ NFT Èì∏ÈÄ†ÊàêÂäü");
    
    // Êü•ËØ¢ÊÄª‰æõÂ∫îÈáè
    const totalSupply = await lipsNft.totalSupply();
    console.log("ÂΩìÂâçÊÄª‰æõÂ∫îÈáè:", totalSupply.toString());
    
    // Êü•ËØ¢Áî®Êà∑ÊåÅÊúâÁöÑ NFT
    const balance = await lipsNft.balanceOf(deployer.address);
    console.log("Áî®Êà∑ÊåÅÊúâÊï∞Èáè:", balance.toString());
    
    if (balance > 0) {
      const tokenId = await lipsNft.tokenOfOwnerByIndex(deployer.address, 0);
      console.log("Á¨¨‰∏Ä‰∏™ NFT ÁöÑ Token ID:", tokenId.toString());
    }
    
  } catch (error) {
    console.log("‚ö†Ô∏è Èì∏ÈÄ† NFT Â§±Ë¥•:", error.message);
  }
  
  // 3. Êü•ËØ¢ÂêàÁ∫¶Áä∂ÊÄÅ
  console.log("\n3. Êü•ËØ¢ÂêàÁ∫¶Áä∂ÊÄÅ...");
  const name = await lipsNft.name();
  const symbol = await lipsNft.symbol();
  const maxSupply = await lipsNft.MAX_SUPPLY();
  const totalSupply = await lipsNft.totalSupply();
  const owner = await lipsNft.owner();
  
  console.log("ÂêàÁ∫¶ÂêçÁß∞:", name);
  console.log("ÂêàÁ∫¶Á¨¶Âè∑:", symbol);
  console.log("ÊúÄÂ§ß‰æõÂ∫îÈáè:", maxSupply.toString());
  console.log("ÂΩìÂâç‰æõÂ∫îÈáè:", totalSupply.toString());
  console.log("ÂêàÁ∫¶Êã•ÊúâËÄÖ:", owner);
  
  console.log("\nüéâ ‰∫§‰∫íÂÆåÊàê!");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå ‰∫§‰∫íÂ§±Ë¥•:");
    console.error(error);
    process.exit(1);
  });
